<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd">
	<!-- 네임스페이스 context, mybatis-spring 추가하였음. -->
	<!-- [1] DataSource 빈을 등록 
			(1) DriverManagerDataSource 빈을 등록
			(2) server.xml 에 설정 되어 있는 DBCP 를 JNDI로 찾아쓰도록 등록하는 방법.
			(3) HikariCP 커넥션 풀을 이용하는 방법 [교재 176p]
	-->
		<!-- (1) DriverManagerDataSource -->
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
			<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
			<property name="username" value="scott" />
			<property name="password" value="tiger" />
		</bean>
		<!-- (2) JNDI 로 룩업하여 사용하는 방법: Tomcat 서버에 등록된 DataSource를 이름으로 찾아 
				  빈으로 등록하는 방법 --> <!-- java:comp/env/ => 톰캣을 찾는 프로토콜 // jdbc/myshop => 톰캣에 등록된 이름. -->
		<bean id="jndiDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
			<property name="jndiName" value="java:comp/env/jdbc/myshop" />
		</bean>
		
		<!-- (3) HikariCP 커넥션 풀을 이용하는 방법 -->
		<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
			<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE" />
			<property name="username" value="myshop" />
			<property name="password" value="1" />
		</bean>
		
		<bean id="hikariDataSource" class="com.zaxxer.hikari.HikariDataSource" 
		destroy-method="close">
			<constructor-arg ref="hikariConfig" />
		</bean>
		
	<!-- [2] SqlSessionFactoryBean 등록 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="hikariDataSource" />
			<property name="configLocation" value="classpath:spring/config/mybatis-config.xml" />
		</bean>
		
	<!-- [3] sqlSessionTemplate 빈 등록. -->
		<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
			<constructor-arg index="0" ref="sqlSessionFactory" />
		</bean>
		
	<!-- [4] mybatis-spring:scan 설정 -->
		<mybatis-spring:scan base-package="com.tis.mapper" />
		<!-- mybatis-spring:scan 에 패키지를 등록하면 해당 패키지에 있는 인터페이스를 구현한 구현객체(Prox객체)
		          를 스프링이 자동으로  만들어준다. 단 이 때, XXXMapper.xml 파일에 기술된 namespace는 해당 인터페이스의
		          패키지명.인터페이스명 으로 기술해야하며, 각 엘리먼트의 id는 인터페이스의 메소드명과 일치해야 한다.-->

</beans>
